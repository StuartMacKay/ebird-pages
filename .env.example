# Django settings and docker-compose.yml are configured with sensible defaults
# for development so whether you run the site with a virtualenv or containers
# everything works out of the box. You will only need to set environment variables
# if you want to change the configuration in some way.

##################
#  Docker Images
##################

# Both POSTGRES_USER and POSTGRES_PASSWORD are required when building the
# postgres image. Since the database is not shared with other projects
# setting the database name is optional. In general, the defaults should
# be sufficient for most purposes.
#export POSTGRES_USER=postgres
#export POSTGRES_PASSWORD=postgres
#export POSTGRES_DB=postgres

######################
#  Docker Containers
######################

# Set the project name, since the default, "django-project-templates" is a
# bit of a mouthful and is prefixed to each log statement which takes up
# a lot of screen real-estate.
#export COMPOSE_PROJECT_NAME=project

# Select the profiles you want to start. There is also a 'backend' profile
# defined which includes all of the services here. You can use this to switch
# between services redis <-> memcached for development, or remove postgres
# in production if you use a managed database service.
#export COMPOSE_PROFILES=postgres,rabbitmq,memcached,django,celery-beat,celery-worker

# Map ports from the Docker virtual network so they are accessible locally.
# You will only need to change these if you have multiple docker projects
# running or there are conflicts with services installed natively.
#export DOCKER_DJANGO_PORT_FORWARD=8000
#export DOCKER_POSTGRES_PORT_FORWARD=5432
#export DOCKER_RABBITMQ_PORT_FORWARD=5672

# The restart policy that Docker will use if a container stops unexpectedly?
#export DOCKER_RESTART_POLICY=no

# The command to run for checking the status of the django service. In production
# protect the end-point with token authentication. DJANGO_WATCHMAN_TOKENS should
# be set to a comma-separated list of accepted tokens. The health check command
# passes the token in as a URL parameter:
# curl localhost:8000/watchman/ping??watchman-token=:token
# For development, to avoid filling up the logs you can set the command to
# /bin/true so the healthcheck always passes.
#export DOCKER_DJANGO_HEALTHCHECK_TEST=curl localhost:8000/watchman/ping

# Add limits for CPU and memory for each service. 0 means grab as much as
# you need.
#export DOCKER_POSTGRES_CPUS=0
#export DOCKER_POSTGRES_MEMORY=0
#export DOCKER_MEMCACHED_CPUS=0
#export DOCKER_MEMCACHED_MEMORY=0
#export DOCKER_RABBITMQ_CPUS=0
#export DOCKER_RABBITMQ_MEMORY=0
#export DOCKER_CELERY_BEAT_CPUS=0
#export DOCKER_CELERY_BEAT_MEMORY=0
#export DOCKER_CELERY_WORKER_CPUS=0
#export DOCKER_CELERY_WORKER_MEMORY=0

####################
#  Connection URLs
####################
# URLs for connecting to PostgreSQL, Memcached and RabbitMQ. The default
# here assumes a connection to a natively installed server. For Docker
# containers the variables are overridden in docker-compose.yml so the
# correct host name is used.

#export BROKER_URL=amqp://guest:guest@locahost:5672/
#export CACHE_URL=pymemcache://localhost:11211
#export DATABASE_URL=postgres://project:password@localhost:5432/project

###########
#  Celery
###########

#export CELERY_LOG_LEVEL=debug

###############
#  S3 Storage
###############

#export AWS_ACCESS_KEY_ID=
#export AWS_SECRET_ACCESS_KEY=
#export AWS_STORAGE_BUCKET_NAME=

# The following variables are set depending on which service is used.

# For AWS
#export AWS_S3_CUSTOM_DOMAIN=

# For Digital Ocean's Spaces
#export AWS_S3_REGION_NAME=
#export AWS_S3_ENDPOINT_URL=

###########
#  Django
###########

# Which environment is running? This can be either 'development' or 'production'.
# This variable is used for all backend services. The equivalent for frontend
# services will be NODE_ENV - using the same values.
#export DJANGO_ENV=development

# The DJANGO_MEDIA_ROOT and DJANGO_STATIC_ROOT variables default to the media
# and static directories in the root of the project. They only need to be set
# if you wish to locate them elsewhere.

#export DJANGO_ADMINS=
#export DJANGO_ADMIN_PATH=admin
#export DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0
#export DJANGO_CACHE_SCHEME=memcached
#export DJANGO_DEBUG=True
#export DJANGO_DEFAULT_STORAGE_BACKEND=django.core.files.storage.FileSystemStorage
#export DJANGO_EMAIL_URL=consolemail://
#export DJANGO_EMAIL_USE_SSL=True
#export DJANGO_LOG_LEVEL=DEBUG
#export DJANGO_MEDIA_ROOT=
#export DJANGO_PRIVATE_STORAGE_BACKEND=django.core.files.storage.FileSystemStorage
#export DJANGO_PUBLIC_STORAGE_BACKEND=django.core.files.storage.FileSystemStorage
#export DJANGO_SECRET_KEY="<not-set>"
#export DJANGO_SENTRY_DSN=
#export DJANGO_SITE_ID=1
#export DJANGO_STATICFILES_BACKEND=django.contrib.staticfiles.storage.StaticFilesStorage
#export DJANGO_STATIC_HOST=
#export DJANGO_STATIC_ROOT=
#export DJANGO_WATCHMAN_TOKENS=token

#############
#  Gunicorn
#############

#export GUNICORN_LOG_LEVEL=debug
#export GUNICORN_NUMBER_OF_WORKERS=1
#export GUNICORN_NUMBER_OF_THREADS=1
#export GUNICORN_RELOAD=False
#export GUNICORN_MAX_REQUESTS=0
#export GUNICORN_TIMEOUT=30

##########
#  eBird
##########

export EBIRD_API_KEY=
